{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport router from \"@/router\";\nimport { mapGetters, mapActions } from \"vuex\";\nimport bcrypt from 'bcryptjs';\nexport default {\n  data() {\n    return {\n      headers: [{\n        text: 'Title',\n        value: 'question'\n      }, {\n        text: 'Answers',\n        value: 'answer'\n      }, {\n        text: 'Action',\n        value: 'actions'\n      }],\n      dialog: false,\n      index: 0,\n      timerCount: 15,\n      answered: [],\n      selectedAnswer: null,\n      correctAnswer: null,\n      score: 0,\n      model: false\n    };\n  },\n  methods: {\n    ...mapActions(['fetchQuestionToPlay', 'createHistory']),\n    clickNext() {\n      if (this.correctAnswer == this.selectedAnswer) {\n        this.score++;\n      }\n      if (this.selectedAnswer != null) {\n        this.answered.push(this.selectedAnswer);\n      } else {\n        this.answered.push('Null');\n      }\n      this.index++;\n      this.timerCount = 15;\n      this.selectedAnswer = null;\n    },\n    nextQuestion() {\n      this.clickNext();\n      this.countDownTimer();\n    },\n    countDownTimer() {\n      if (this.timerCount > 0) {\n        setTimeout(() => {\n          this.timerCount -= 1;\n          this.countDownTimer();\n        }, 1000);\n      } else {\n        setTimeout(() => {\n          this.nextQuestion();\n        }, 1000);\n      }\n    },\n    seeResult() {\n      if (sessionStorage.getItem('quizId')) {\n        this.createHistory({\n          quizId: sessionStorage.getItem('quizId'),\n          answers: this.answered,\n          score: this.score\n        });\n        router.push(\"/result\");\n      }\n    },\n    back() {\n      router.push('/quiz');\n    },\n    setCorrectAnswer(value) {\n      this.correctAnswer = value;\n    },\n    encryptRoute(route) {\n      const salt = bcrypt.genSaltSync(10);\n      return bcrypt.hashSync(route, salt);\n    }\n  },\n  computed: mapGetters([\"allQuestionToPlay\"]),\n  watch: {\n    index: {\n      handler(value) {\n        if (value == this.allQuestionToPlay.length) {\n          this.seeResult();\n        }\n      }\n    }\n  },\n  mounted() {\n    this.fetchQuestionToPlay();\n    this.countDownTimer();\n    if (!sessionStorage.getItem('quizId')) {\n      router.push('/quiz');\n    }\n  }\n};","map":{"version":3,"mappings":";AAqFA;AACA;AACA;AACA;EACAA;IACA;MACAC,UACA;QAAAC;QAAAC;MAAA,GACA;QAAAD;QAAAC;MAAA,GACA;QAAAD;QAAAC;MAAA,EACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EAEAC;IACA;IACAC;MACA;QACA;MACA;MACA;QACA;MACA;QACA;MACA;MACA;MACA;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MACA;QACAC;UACA;UACA;QACA;MACA;QACAA;UACA;QACA;MACA;IACA;IACAC;MACA;QACA;UAAAC;UAAAC;UAAAT;QAAA;QACAU;MACA;IACA;IACAC;MACAD;IACA;IACAE;MACA;IACA;IACAC;MACA;MACA;IACA;EACA;EAEAC;EAEAC;IACApB;MACAqB;QACA;UACA;QACA;MACA;IACA;EACA;EACAC;IACA;IACA;IACA;MACAP;IACA;EACA;AACA","names":["data","headers","text","value","dialog","index","timerCount","answered","selectedAnswer","correctAnswer","score","model","methods","clickNext","nextQuestion","countDownTimer","setTimeout","seeResult","quizId","answers","router","back","setCorrectAnswer","encryptRoute","computed","watch","handler","mounted"],"sourceRoot":"src/components","sources":["play-quiz.vue"],"sourcesContent":["<template>\r\n    <v-row align=\"end\" justify=\"center\" >\r\n        <v-col cols=\"6\" v-if=\"allQuestionToPlay.length > 0\">\r\n            <div\r\n                v-for=\"(question, i) in allQuestionToPlay\"\r\n                :key=\"i\"\r\n            >\r\n                <v-card\r\n                    class=\"mx-auto mt-9 elevation-5\"\r\n                    v-if=\"index == i\"\r\n                >    \r\n                    <v-card-text \r\n                        class=\"text--primary d-flex\"\r\n                    >\r\n                        <div class=\"text-h5\">{{i+1}}. {{question.question}}</div>\r\n                        <v-spacer vertical></v-spacer>\r\n                        <div class=\"timer blue rounded text-h6 px-3 white--text\">{{timerCount}}</div>\r\n                    </v-card-text>\r\n                <v-img :src=\"'http://localhost:3000/uploads/'+question.image\" max-width=\"300px\"></v-img>\r\n                    <v-divider></v-divider>\r\n                    <v-card-body>\r\n                        <v-list>\r\n                            <v-list-item-group\r\n                                v-model=\"selectedAnswer\"\r\n                            >\r\n                                <template v-for=\"(item, i) in question.answer\">\r\n                                    <v-divider\r\n                                        v-if=\"!item\"\r\n                                        :key=\"`divider-${i}`\"\r\n                                    ></v-divider>\r\n                                    <v-list-item\r\n                                        v-else\r\n                                        :key=\"`item-${i}`\"\r\n                                        :value=\"i\"\r\n                                        class=\"px-5 py-0 my-0\"\r\n                                        color=\"blue\"\r\n                                        @click=\"setCorrectAnswer(question.answer[i].isCorrect ? i : null)\"\r\n                                    >\r\n                                        <v-list-item-content>\r\n                                            <v-list-item-title v-text=\"item.answerContent\"></v-list-item-title>\r\n                                        </v-list-item-content>                                    \r\n                                    </v-list-item>\r\n                                </template>\r\n                            </v-list-item-group>\r\n                        </v-list>\r\n                    </v-card-body>\r\n                    <v-divider></v-divider>\r\n                    <v-card-actions>\r\n                        {{index+1}}/{{allQuestionToPlay.length}}\r\n                        <v-spacer></v-spacer>\r\n                        <v-btn\r\n                            color=\"blue\"\r\n                            text\r\n                            @click=\"clickNext\"\r\n                            :disabled=\"allQuestionToPlay.length == index || selectedAnswer == null\"\r\n                        >\r\n                            Next\r\n                            <v-icon>mdi-arrow-right-circle</v-icon>\r\n                        </v-btn>\r\n                    </v-card-actions>\r\n                </v-card>\r\n            </div>\r\n        </v-col>\r\n        <v-col cols=\"6\" v-else>\r\n            <v-card class=\"mt-3\">\r\n                <v-card-text \r\n                    class=\"text--primary\"\r\n                >\r\n                    <v-card-text \r\n                        class=\"text--error d-flex\"\r\n                    >\r\n                        <h1 class=\"error--text\">There is no question!</h1>\r\n                    </v-card-text>\r\n                    <v-divider class=\"mb-3\"></v-divider>\r\n                    <v-card-actions class=\"d-flex\">\r\n                        <v-spacer vertical></v-spacer>\r\n                        <v-btn class=\"blue white--text\" @click=\"$router.push('/quiz')\">Back</v-btn>\r\n                    </v-card-actions>\r\n                </v-card-text>\r\n            </v-card>\r\n        </v-col>\r\n    </v-row>\r\n</template>\r\n\r\n<script>\r\nimport router from \"@/router\";\r\nimport { mapGetters, mapActions } from \"vuex\";\r\nimport bcrypt from 'bcryptjs';\r\nexport default {\r\n    data() {\r\n        return {\r\n            headers: [\r\n                { text: 'Title', value: 'question' },\r\n                { text: 'Answers', value: 'answer' },\r\n                { text: 'Action', value: 'actions' },\r\n            ],\r\n            dialog: false,\r\n            index: 0,\r\n            timerCount: 15,\r\n            answered: [],\r\n            selectedAnswer: null,\r\n            correctAnswer: null,\r\n            score: 0,\r\n            model: false\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        ...mapActions(['fetchQuestionToPlay', 'createHistory']),\r\n        clickNext() {\r\n            if (this.correctAnswer == this.selectedAnswer) {\r\n                this.score ++\r\n            } \r\n            if (this.selectedAnswer != null) {\r\n                this.answered.push(this.selectedAnswer)\r\n            } else {\r\n                this.answered.push('Null')\r\n            }\r\n            this.index ++\r\n            this.timerCount = 15\r\n            this.selectedAnswer = null\r\n        },\r\n        nextQuestion() {\r\n            this.clickNext()\r\n            this.countDownTimer()\r\n        },\r\n        countDownTimer () {\r\n            if (this.timerCount > 0) {\r\n                setTimeout(() => {\r\n                    this.timerCount -= 1\r\n                    this.countDownTimer()\r\n                }, 1000)\r\n            } else {\r\n                setTimeout(() => {\r\n                    this.nextQuestion()\r\n                }, 1000);\r\n            }\r\n        },\r\n        seeResult() {\r\n            if (sessionStorage.getItem('quizId')) {\r\n                this.createHistory({quizId: sessionStorage.getItem('quizId'), answers: this.answered, score: this.score})\r\n                router.push(\"/result\");\r\n            }\r\n        },\r\n        back() {\r\n            router.push('/quiz')\r\n        },\r\n        setCorrectAnswer(value) {\r\n            this.correctAnswer = value\r\n        },\r\n        encryptRoute(route) { \r\n            const salt = bcrypt.genSaltSync(10)\r\n            return bcrypt.hashSync(route, salt)\r\n        },\r\n    },\r\n\r\n    computed: mapGetters([\"allQuestionToPlay\"]),\r\n\r\n    watch: {\r\n        index: {\r\n            handler(value) {\r\n                if (value == this.allQuestionToPlay.length) {\r\n                    this.seeResult()\r\n                }\r\n            },\r\n        },\r\n    },\r\n    mounted() {\r\n        this.fetchQuestionToPlay()\r\n        this.countDownTimer()\r\n        if (! sessionStorage.getItem('quizId')) {\r\n            router.push('/quiz')\r\n        }\r\n    },\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module"}